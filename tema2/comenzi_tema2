
#connect to fep 
ssh costel.filimon@fep.grid.pub.ro
#connect to vm from fep
ssh -i ~/.ssh/openstack.key student@10.9.4.55

Ip address on openstack: 10.9.4.55

A=16
B=100
C=164
D=170
E=227
F=199
G=49
H=12
I=115
J=18
K=185

Exercise 1:
(10 puncte) Adresare IPv4
Configurați cu adrese IP toate legăturile din topologie, astfel:
Rețeaua red: 10.11.$A.0/28
Rețeaua green: 10.11.$A.16/28
Rețeaua blue: 10.11.$B.32/30
Sistemul host va avea prima adresă asignabilă, iar containerul, pe cea de-a doua.
Configurați rutarea IPv4 pentru a permite comunicarea între toate sistemele. 
Sistemele red, green și blue vor avea ruta default prin sistemul host.
Configurați rutarea IPv4 pentru a permite comunicarea între toate sistemele. 
Sistemele red, green și blue vor avea ruta default prin sistemul host.

(10 puncte) Adresare IPv6
Configurați adrese IPv6 pentru întreaga rețea astfel:
Rețeaua red 2001:12:$C::/64
Rețeaua green 2001:12:$D::/64
Rețeaua blue 2001:12:$E::/64
Sistemul host va avea prima adresă asignabilă, iar containerul, pe cea de-a doua.
Configurați rutarea IPv6 pentru a permite comunicarea între toate sistemele.
Sistemele red, green și blue vor avea ruta default prin sistemul host.

10.11.16.2 red
10.11.16.18 green
10.11.100.34 blue

2001:12:164::2 red
2001:12:170::2 green
2001:12:227::2 blue

# FOR RED
echo -e "
auto eth0
iface eth0 inet static
address 10.11.16.2/28
gateway 10.11.16.1

iface eth0 inet6 static
address 2001:12:164::2/64
gateway 2001:12:164::1
" >> /etc/network/interfaces.d/red.conf

# FOR GREEN

echo -e "
auto eth0
iface eth0 inet static
address 10.11.16.18/28
gateway 10.11.16.17

iface eth0 inet6 static
address 2001:12:170::2/64
gateway 2001:12:170::1
" >> /etc/network/interfaces.d/green.conf

# FOR BLUE

echo -e "
auto eth0
iface eth0 inet static
address 10.11.100.34/28
gateway 10.11.100.33

iface eth0 inet6 static
address 2001:12:227::2/64
gateway 2001:12:227::1
" >> /etc/network/interfaces.d/blue.conf


# FOR HOST

# for permanent routing uncomment 2 lines from 
/etc/sysctl.conf 

# configure this file to add addresses
/etc/network/interfaces.d/containers.conf


echo -e "
auto veth-red
iface veth-red inet static
address 10.11.16.1/28

iface veth-red inet6 static
address 2001:12:164::1/64

auto veth-green
iface veth-green inet static
address 10.11.16.17/28

iface veth-green inet6 static
address 2001:12:170::1/64

auto veth-blue
iface veth-blue inet static
address 10.11.100.33/28

iface veth-blue inet6 static
address 2001:12:227::1/64
" >> /etc/network/interfaces.d/containers.conf

# restart the internet connection
ifdown --force --verbose veth-red && ifup --force --verbose veth-red
ifdown --force --verbose veth-green && ifup --force --verbose veth-green
ifdown --force --verbose veth-blue && ifup --force --verbose veth-blue

# CONFIGURE NAMES: /etc/hosts

# ipv4
10.11.16.2  red
10.11.16.18 green
10.11.100.34    blue

#ipv6
2001:12:164::2 red
2001:12:170::2 green
2001:12:227::2 green


USERNAME=costel.filimon
A=16
B=100
C=164
D=170
E=227
F=199
G=49
H=12
I=115
J=18
K=185


# restart the internet connection
ifdown --force --verbose veth-red && ifup --force --verbose veth-red


Ex. 4:

iptables -t nat -A POSTROUTING -s 10.11.16.2 -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s 10.11.16.18 -o eth0 -j MASQUERADE
iptables -t nat -A POSTROUTING -s 10.11.100.34 -o eth0 -j MASQUERADE

To iptables rules: 

iptables-save > /etc/iptables/rules.v4
sudo /sbin/iptables-save > /etc/iptables/rules.v4


Ex. 6:

 22049 -- ssh pe blue
iptables -t nat -A PREROUTING -p tcp --dport 22049 -j DNAT --to-destination 10.11.100.34:22
 22012 -- ssh pe green
 iptables -t nat -A PREROUTING -p tcp --dport 22012 -j DNAT --to-destination 10.11.16.18:22
 22115 -- ssh pe red
iptables -t nat -A PREROUTING -p tcp --dport 22115 -j DNAT --to-destination 10.11.16.2:22

 19141 -- ftp pe red
 ip6tables -t nat -A PREROUTING -p tcp --dport 19141 -j DNAT --to-destination 2001:12:164::2:21
 iptables -t nat -A PREROUTING -p tcp --dport 19141 -j DNAT --to-destination 10.11.16.2:21

 11522 -- trackerul de pe green -- who da fuck is this tracker?????? which port? 

 iptables -t nat -A PREROUTING -p udp --dport 11522 -j DNAT --to-destination 10.11.16.18:8977


Ex7
https://www.cyberciti.biz/faq/iptables-block-port/

Afisarer reguli:
iptables -t filter -L -n -v --line-numbers

# block smtp from red
iptables -A INPUT -p tcp -i veth-red -s 10.11.16.2 --dport 25 -j DROP

# block tracker from red
iptables -A FORWARD -p udp -i veth-red -s 10.11.16.2 -d 10.11.16.18 --dport 8977 -j DROP


# block tracker on RED
# tot ce vine de pe red pentru green-tracker trebuie blocat
iptables -A INPUT -p tcp -i veth-red -s 10.11.16.2 --dport 25 -j DROP


udp        0      0 0.0.0.0:8977            0.0.0.0:*                           1527/python3   


# blochez toate conexiunile trimise la blue, cu exceptia icmp, ssh si ftp

iptables -A INPUT -p tcp -i veth-blue --dport 22 -j DROP
iptables -A INPUT -p tcp --dport 21 -j DROP
iptables -A INPUT -p tcp --dport 22 -j ACCEPT


iptables -D INPUT -i veth-blue -m state --state ESTABLISHED,RELATED -j ACCEPT 
iptables -A INPUT -i veth-blue -j DROP
iptables -D OUTPUT -i veth-blue -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -i veth-blue -j DROP
iptables -A INPUT -p tcp -m tcp -m multiport --dports 21,22 -j ACCEPT



REZOLVARE: -- problema era ca eu puneam pe input, regulile trebuiau puse pe output
iptables -A FORWARD -p ICMP -d 10.11.100.34 -j ACCEPT
iptables -A FORWARD -p tcp -d 10.11.100.34 --dport 21 -j ACCEPT
iptables -A FORWARD -p tcp -d 10.11.100.34 --dport 22 -j ACCEPT
iptables -A FORWARD -p tcp -d 10.11.100.34 -m state --state ESTABLISHED,RELATED -j ACCEPT

iptables -A FORWARD -p tcp -d 10.11.100.34 -m state --state NEW -j DROP



echo -e "
Host h
  HostName host
  User student
  Port 22
Host r
  HostName red
  User student
  Port 22
Host g
  HostName green
  User student
  Port 22
Host b
  HostName blue
  User student
  Port 22
" > ~/.ssh/config


Ex. 9:
https://stackoverflow.com/questions/1324421/how-to-get-past-the-login-page-with-wget


# Log in to the server.  This only needs to be done once.
wget --save-cookies cookies.txt --keep-session-cookies --user=fs --password=cuba1337 http://host/forbidden/
     # --post-data 'user=fs&password=cuba1337' \
     --user=fs --password=cuba1337 \
     http://host/forbidden/

# Now grab the page or pages we care about.
wget -r --load-cookies cookies.txt http://host/forbidden/


wget --save-cookies cookies.txt --keep-session-cookies --post-data 'user=fs&password=cuba1337' http://host/forbidden/


curl --user user:pass --cookie-jar ./somefile https://xyz.com/a
curl --cookie ./somefile https://xyz.com/b



Exercitiul 10(mail)

mail -s "Promotie Corona" contact@host 

uuencode attachment.bin attachment.bin | mail -s "Promotie Corona" contact@host <<< $1
// acesta cu mutt a functionat bine
mutt -s "Promotie Corona" -a ./attachment.bin -- contact@host <<< $1





for i in `curl -i ftp://ftp.example.com/pub/centos/6.5/updates/i386/repodata/ | awk '{print $9}' | grep ^8`; do
    curl -O http://ftp.eample.com/pub/centos/6.5/${i} ;
done






Exerciitul 13:
nmap -sS -p 21 host

Exercitiul 12:
Tot ce vine de la sursa blue, pentru serverul de ftp din green, accepta si trimite log

Exemple:
iptables -N LOGGING
iptables -A INPUT -j LOGGING
iptables -A LOGGING -m limit --limit 2/min -j LOG --log-prefix "IPTables-Dropped: " --log-level 4
iptables -A LOGGING -j DROP

For example, drop and log all connections from IP address 64.55.11.2 to your /var/log/iptables.log file:
iptables -A INPUT -s 64.55.11.2 -m limit --limit 5/m --limit-burst 7 -j LOG --log-prefix '** HACKERS **'--log-level 4
iptables -A INPUT -s 64.55.11.2 -j DROP

Rezolvare:
https://askubuntu.com/questions/348439/where-can-i-find-the-iptables-log-file-and-how-can-i-change-its-location

Modifica fisierul in care se scriu logurile:
/etc/rsyslog.d/<my_conf_file>

:msg,contains,"insecure-telnet: " -/var/log/insecure.log
& stop


tot ce vine de pe blue, cu destinatie serverul de telnet, pun in log 
iptables -I INPUT 2 -p tcp -i veth-blue -s 10.11.100.34 -d 10.11.16.18 --dport 23 -j LOG --log-prefix "insecure-telnet: "

Regula corecta: 
iptables -I FORWARD 2 -p tcp -i veth-blue -s 10.11.100.34 -d 10.11.16.18 --dport 23 -j LOG --log-prefix "insecure-telnet: "


--log-prefix "insecure-telnet: "


Bonus: 14

(Bonus - 10 puncte) Configurați un tunel GRE (Generic Routing Encapsulation) între red și green.
Denumiți interfețele de tunel dacic pe ambele capete.
Folosiți rețeaua IPv6 2021:20:199::/64 pentru capetele tunelului.
https://community.hetzner.com/tutorials/linux-setup-gre-tunnel
https://docs.cumulusnetworks.com/cumulus-linux-42/Layer-3/GRE-Tunneling/

RED:

sudo echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
sudo sysctl -p

sudo ip tunnel add dacic mode gre local 10.11.16.2 remote 10.11.16.18 ttl 255
sudo ip addr add 2021:20:199::1/64 dev dacic
sudo ip link set dacic up

GREEN:

sudo ip tunnel add dacic mode gre local 10.11.16.18 remote 10.11.16.2 ttl 255
sudo ip addr add 2021:20:199::2/64 dev dacic
sudo ip link set dacic up
ping 2021:20:199::1


RED 
echo -e "
auto dacic
iface dacic
tunnel-mode gre
tunnel-endpoint 10.11.16.18
tunnel-local 10.11.16.2
tunnel-ttl 225
address 2021:20:199::1/64
" > /etc/interfaces.d/tunneling.conf


GREEN

echo -e "
auto dacic
iface dacic
tunnel-mode gre
tunnel-endpoint 10.11.16.2
tunnel-local 10.11.16.18
tunnel-ttl 225
address 2021:20:199::2/64
" > /etc/interfaces.d/tunneling.conf